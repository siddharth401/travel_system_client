{"code":"webpackJsonp([38],{G4FD:function(t,e){t.exports=\"// -----------------------------------\\n// Slidebars\\n// Version 0.10\\n// http://plugins.adchsm.me/slidebars/\\n//\\n// Written by Adam Smith\\n// http://www.adchsm.me/\\n//\\n// Released under MIT License\\n// http://plugins.adchsm.me/slidebars/license.txt\\n//\\n// ---------------------\\n// Index of Slidebars.js\\n//\\n// 001 - Default Settings\\n// 002 - Feature Detection\\n// 003 - User Agents\\n// 004 - Setup\\n// 005 - Animation\\n// 006 - Operations\\n// 007 - API\\n// 008 - User Input\\n\\n;(function($) {\\n\\n\\t$.slidebars = function(options) {\\n\\n\\t\\t// ----------------------\\n\\t\\t// 001 - Default Settings\\n\\n\\t\\tvar settings = $.extend({\\n\\t\\t\\tsiteClose: true, // true or false - Enable closing of Slidebars by clicking on #sb-site.\\n\\t\\t\\tscrollLock: false, // true or false - Prevent scrolling of site when a Slidebar is open.\\n\\t\\t\\tdisableOver: false, // integer or false - Hide Slidebars over a specific width.\\n\\t\\t\\thideControlClasses: false // true or false - Hide controls at same width as disableOver.\\n\\t\\t}, options);\\n\\n\\t\\t// -----------------------\\n\\t\\t// 002 - Feature Detection\\n\\n\\t\\tvar test = document.createElement('div').style, // Create element to test on.\\n\\t\\tsupportTransition = false, // Variable for testing transitions.\\n\\t\\tsupportTransform = false; // variable for testing transforms.\\n\\n\\t\\t// Test for CSS Transitions\\n\\t\\tif (test.MozTransition === '' || test.WebkitTransition === '' || test.OTransition === '' || test.transition === '') supportTransition = true;\\n\\n\\t\\t// Test for CSS Transforms\\n\\t\\tif (test.MozTransform === '' || test.WebkitTransform === '' || test.OTransform === '' || test.transform === '') supportTransform = true;\\n\\n\\t\\t// -----------------\\n\\t\\t// 003 - User Agents\\n\\n\\t\\tvar ua = navigator.userAgent, // Get user agent string.\\n\\t\\tandroid = false, // Variable for storing android version.\\n\\t\\tiOS = false; // Variable for storing iOS version.\\n\\n\\t\\tif (/Android/.test(ua)) { // Detect Android in user agent string.\\n\\t\\t\\tandroid = ua.substr(ua.indexOf('Android')+8, 3); // Set version of Android.\\n\\t\\t} else if (/(iPhone|iPod|iPad)/.test(ua)) { // Detect iOS in user agent string.\\n\\t\\t\\tiOS = ua.substr(ua.indexOf('OS ')+3, 3).replace('_', '.'); // Set version of iOS.\\n\\t\\t}\\n\\n\\t\\tif (android && android < 3 || iOS && iOS < 5) $('html').addClass('sb-static'); // Add helper class for older versions of Android & iOS.\\n\\n\\t\\t// -----------\\n\\t\\t// 004 - Setup\\n\\n\\t\\t// Site container\\n\\t\\tvar $site = $('#sb-site-container, .sb-site-container'); // Cache the selector.\\n\\n\\t\\t// Left Slidebar\\n\\t\\tif ($('.sb-left').length) { // Check if the left Slidebar exists.\\n\\t\\t\\tvar $left = $('.sb-left'), // Cache the selector.\\n\\t\\t\\tleftActive = false; // Used to check whether the left Slidebar is open or closed.\\n\\t\\t}\\n\\n\\t\\t// Right Slidebar\\n\\t\\tif ($('.sb-right').length) { // Check if the right Slidebar exists.\\n\\t\\t\\tvar $right = $('.sb-right'), // Cache the selector.\\n\\t\\t\\trightActive = false; // Used to check whether the right Slidebar is open or closed.\\n\\t\\t}\\n\\n\\t\\tvar init = false, // Initialisation variable.\\n\\t\\twindowWidth = $(window).width(), // Get width of window.\\n\\t\\t$controls = $('.sb-toggle-left, .sb-toggle-right, .sb-open-left, .sb-open-right, .sb-close'), // Cache the control classes.\\n\\t\\t$slide = $('.sb-slide'); // Cache users elements to animate.\\n\\n\\t\\t// Initailise Slidebars\\n\\t\\tfunction initialise() {\\n\\t\\t\\tif (!settings.disableOver || (typeof settings.disableOver === 'number' && settings.disableOver >= windowWidth)) { // False or larger than window size.\\n\\t\\t\\t\\tinit = true; // true enabled Slidebars to open.\\n\\t\\t\\t\\t$('html').addClass('sb-init'); // Add helper class.\\n\\t\\t\\t\\tif (settings.hideControlClasses) $controls.removeClass('sb-hide'); // Remove class just incase Slidebars was originally disabled.\\n\\t\\t\\t\\tcss(); // Set required inline styles.\\n\\t\\t\\t} else if (typeof settings.disableOver === 'number' && settings.disableOver < windowWidth) { // Less than window size.\\n\\t\\t\\t\\tinit = false; // false stop Slidebars from opening.\\n\\t\\t\\t\\t$('html').removeClass('sb-init'); // Remove helper class.\\n\\t\\t\\t\\tif (settings.hideControlClasses) $controls.addClass('sb-hide'); // Hide controls\\n\\t\\t\\t\\t$site.css('minHeight', ''); // Remove minimum height.\\n\\t\\t\\t\\tif (leftActive || rightActive) close(); // Close Slidebars if open.\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tinitialise();\\n\\n\\t\\t// Inline CSS\\n\\t\\tfunction css() {\\n\\t\\t\\t// Set minimum height.\\n\\t\\t\\t$site.css('minHeight', ''); // Reset minimum height.\\n\\t\\t\\t$site.css('minHeight', $('html').height() + 'px'); // Set minimum height of the site to the minimum height of the html.\\n\\n\\t\\t\\t// Custom Slidebar widths.\\n\\t\\t\\tif ($left && $left.hasClass('sb-width-custom')) $left.css('width', $left.attr('data-sb-width')); // Set user custom width.\\n\\t\\t\\tif ($right && $right.hasClass('sb-width-custom')) $right.css('width', $right.attr('data-sb-width')); // Set user custom width.\\n\\n\\t\\t\\t// Set off-canvas margins for Slidebars with push and overlay animations.\\n\\t\\t\\tif ($left && ($left.hasClass('sb-style-push') || $left.hasClass('sb-style-overlay'))) $left.css('marginLeft', '-' + $left.css('width'));\\n\\t\\t\\tif ($right && ($right.hasClass('sb-style-push') || $right.hasClass('sb-style-overlay'))) $right.css('marginRight', '-' + $right.css('width'));\\n\\n\\t\\t\\t// Site scroll locking.\\n\\t\\t\\tif (settings.scrollLock) $('html').addClass('sb-scroll-lock');\\n\\t\\t}\\n\\n\\t\\t// Resize Functions\\n\\t\\t$(window).resize(function() {\\n\\t\\t\\tvar resizedWindowWidth = $(window).width(); // Get resized window width.\\n\\t\\t\\tif (windowWidth !== resizedWindowWidth) { // Slidebars is running and window was actually resized.\\n\\t\\t\\t\\twindowWidth = resizedWindowWidth; // Set the new window width.\\n\\t\\t\\t\\tinitialise(); // Call initalise to see if Slidebars should still be running.\\n\\t\\t\\t\\tif (leftActive) open('left'); // If left Slidebar is open, calling open will ensure it is the correct size.\\n\\t\\t\\t\\tif (rightActive) open('right'); // If right Slidebar is open, calling open will ensure it is the correct size.\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\t// I may include a height check along side a width check here in future.\\n\\n\\t\\t// ---------------\\n\\t\\t// 005 - Animation\\n\\n\\t\\tvar animation; // Animation type.\\n\\n\\t\\t// Set animation type.\\n\\t\\tif (supportTransition && supportTransform) { // Browser supports css transitions and transforms.\\n\\t\\t\\tanimation = 'translate'; // Translate for browsers that support it.\\n\\t\\t\\tif (android && android < 4.4) animation = 'side'; // Android supports both, but can't translate any fixed positions, so use left instead.\\n\\t\\t} else {\\n\\t\\t\\tanimation = 'jQuery'; // Browsers that don't support css transitions and transitions.\\n\\t\\t}\\n\\n\\t\\t// Animate mixin.\\n\\t\\tfunction animate(object, amount, side) {\\n\\t\\t\\t// Choose selectors depending on animation style.\\n\\t\\t\\tvar selector;\\n\\n\\t\\t\\tif (object.hasClass('sb-style-push')) {\\n\\t\\t\\t\\tselector = $site.add(object).add($slide); // Push - Animate site, Slidebar and user elements.\\n\\t\\t\\t} else if (object.hasClass('sb-style-overlay')) {\\n\\t\\t\\t\\tselector = object; // Overlay - Animate Slidebar only.\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tselector = $site.add($slide); // Reveal - Animate site and user elements.\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Apply animation\\n\\t\\t\\tif (animation === 'translate') {\\n\\t\\t\\t\\tselector.css('transform', 'translate(' + amount + ')'); // Apply the animation.\\n\\n\\t\\t\\t} else if (animation === 'side') {\\n\\t\\t\\t\\tif (amount[0] === '-') amount = amount.substr(1); // Remove the '-' from the passed amount for side animations.\\n\\t\\t\\t\\tif (amount !== '0px') selector.css(side, '0px'); // Add a 0 value so css transition works.\\n\\t\\t\\t\\tsetTimeout(function() { // Set a timeout to allow the 0 value to be applied above.\\n\\t\\t\\t\\t\\tselector.css(side, amount); // Apply the animation.\\n\\t\\t\\t\\t}, 1);\\n\\n\\t\\t\\t} else if (animation === 'jQuery') {\\n\\t\\t\\t\\tif (amount[0] === '-') amount = amount.substr(1); // Remove the '-' from the passed amount for jQuery animations.\\n\\t\\t\\t\\tvar properties = {};\\n\\t\\t\\t\\tproperties[side] = amount;\\n\\t\\t\\t\\tselector.stop().animate(properties, 400); // Stop any current jQuery animation before starting another.\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If closed, remove the inline styling on completion of the animation.\\n\\t\\t\\tsetTimeout(function() {\\n\\t\\t\\t\\tif (amount === '0px') {\\n\\t\\t\\t\\t\\tselector.removeAttr('style');\\n\\t\\t\\t\\t\\tcss();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, 400);\\n\\t\\t}\\n\\n\\t\\t// ----------------\\n\\t\\t// 006 - Operations\\n\\n\\t\\t// Open a Slidebar\\n\\t\\tfunction open(side) {\\n\\t\\t\\t// Check to see if opposite Slidebar is open.\\n\\t\\t\\tif (side === 'left' && $left && rightActive || side === 'right' && $right && leftActive) { // It's open, close it, then continue.\\n\\t\\t\\t\\tclose();\\n\\t\\t\\t\\tsetTimeout(proceed, 400);\\n\\t\\t\\t} else { // Its not open, continue.\\n\\t\\t\\t\\tproceed();\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Open\\n\\t\\t\\tfunction proceed() {\\n\\t\\t\\t\\tif (init && side === 'left' && $left) { // Slidebars is initiated, left is in use and called to open.\\n\\t\\t\\t\\t\\t$('html').addClass('sb-active sb-active-left'); // Add active classes.\\n\\t\\t\\t\\t\\t$left.addClass('sb-active');\\n\\t\\t\\t\\t\\tanimate($left, $left.css('width'), 'left'); // Animation\\n\\t\\t\\t\\t\\tsetTimeout(function() { leftActive = true; }, 400); // Set active variables.\\n\\t\\t\\t\\t} else if (init && side === 'right' && $right) { // Slidebars is initiated, right is in use and called to open.\\n\\t\\t\\t\\t\\t$('html').addClass('sb-active sb-active-right'); // Add active classes.\\n\\t\\t\\t\\t\\t$right.addClass('sb-active');\\n\\t\\t\\t\\t\\tanimate($right, '-' + $right.css('width'), 'right'); // Animation\\n\\t\\t\\t\\t\\tsetTimeout(function() { rightActive = true; }, 400); // Set active variables.\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Close either Slidebar\\n\\t\\tfunction close(link) {\\n\\t\\t\\tif (leftActive || rightActive) { // If a Slidebar is open.\\n\\t\\t\\t\\tif (leftActive) {\\n\\t\\t\\t\\t\\tanimate($left, '0px', 'left'); // Animation\\n\\t\\t\\t\\t\\tleftActive = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (rightActive) {\\n\\t\\t\\t\\t\\tanimate($right, '0px', 'right'); // Animation\\n\\t\\t\\t\\t\\trightActive = false;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tsetTimeout(function() { // Wait for closing animation to finish.\\n\\t\\t\\t\\t\\t$('html').removeClass('sb-active sb-active-left sb-active-right'); // Remove active classes.\\n\\t\\t\\t\\t\\tif ($left) $left.removeClass('sb-active');\\n\\t\\t\\t\\t\\tif ($right) $right.removeClass('sb-active');\\n\\t\\t\\t\\t\\tif (typeof link !== 'undefined') window.location = link; // If a link has been passed to the function, go to it.\\n\\t\\t\\t\\t}, 400);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Toggle either Slidebar\\n\\t\\tfunction toggle(side) {\\n\\t\\t\\tif (side === 'left' && $left) { // If left Slidebar is called and in use.\\n\\t\\t\\t\\tif (!leftActive) {\\n\\t\\t\\t\\t\\topen('left'); // Slidebar is closed, open it.\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tclose(); // Slidebar is open, close it.\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (side === 'right' && $right) { // If right Slidebar is called and in use.\\n\\t\\t\\t\\tif (!rightActive) {\\n\\t\\t\\t\\t\\topen('right'); // Slidebar is closed, open it.\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tclose(); // Slidebar is open, close it.\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// ---------\\n\\t\\t// 007 - API\\n\\n\\t\\tthis.slidebars = {\\n\\t\\t\\topen: open, // Maps user variable name to the open method.\\n\\t\\t\\tclose: close, // Maps user variable name to the close method.\\n\\t\\t\\ttoggle: toggle, // Maps user variable name to the toggle method.\\n\\t\\t\\tinit: function() { // Returns true or false whether Slidebars are running or not.\\n\\t\\t\\t\\treturn init; // Returns true or false whether Slidebars are running.\\n\\t\\t\\t},\\n\\t\\t\\tactive: function(side) { // Returns true or false whether Slidebar is open or closed.\\n\\t\\t\\t\\tif (side === 'left' && $left) return leftActive;\\n\\t\\t\\t\\tif (side === 'right' && $right) return rightActive;\\n\\t\\t\\t},\\n\\t\\t\\tdestroy: function(side) { // Removes the Slidebar from the DOM.\\n\\t\\t\\t\\tif (side === 'left' && $left) {\\n\\t\\t\\t\\t\\tif (leftActive) close(); // Close if its open.\\n\\t\\t\\t\\t\\tsetTimeout(function() {\\n\\t\\t\\t\\t\\t\\t$left.remove(); // Remove it.\\n\\t\\t\\t\\t\\t\\t$left = false; // Set variable to false so it cannot be opened again.\\n\\t\\t\\t\\t\\t}, 400);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (side === 'right' && $right) {\\n\\t\\t\\t\\t\\tif (rightActive) close(); // Close if its open.\\n\\t\\t\\t\\t\\tsetTimeout(function() {\\n\\t\\t\\t\\t\\t\\t$right.remove(); // Remove it.\\n\\t\\t\\t\\t\\t\\t$right = false; // Set variable to false so it cannot be opened again.\\n\\t\\t\\t\\t\\t}, 400);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// ----------------\\n\\t\\t// 008 - User Input\\n\\n\\t\\tfunction eventHandler(event, selector) {\\n\\t\\t\\tevent.stopPropagation(); // Stop event bubbling.\\n\\t\\t\\tevent.preventDefault(); // Prevent default behaviour\\n\\t\\t\\tif (event.type === 'touchend') selector.off('click'); // If event type was touch turn off clicks to prevent phantom clicks.\\n\\t\\t}\\n\\n\\t\\t// Toggle left Slidebar\\n\\t\\t$('.sb-toggle-left').on('touchend click', function(event) {\\n\\t\\t\\teventHandler(event, $(this)); // Handle the event.\\n\\t\\t\\ttoggle('left'); // Toggle the left Slidbar.\\n\\t\\t});\\n\\n\\t\\t// Toggle right Slidebar\\n\\t\\t$('.sb-toggle-right').on('touchend click', function(event) {\\n\\t\\t\\teventHandler(event, $(this)); // Handle the event.\\n\\t\\t\\ttoggle('right'); // Toggle the right Slidbar.\\n\\t\\t});\\n\\n\\t\\t// Open left Slidebar\\n\\t\\t$('.sb-open-left').on('touchend click', function(event) {\\n\\t\\t\\teventHandler(event, $(this)); // Handle the event.\\n\\t\\t\\topen('left'); // Open the left Slidebar.\\n\\t\\t});\\n\\n\\t\\t// Open right Slidebar\\n\\t\\t$('.sb-open-right').on('touchend click', function(event) {\\n\\t\\t\\teventHandler(event, $(this)); // Handle the event.\\n\\t\\t\\topen('right'); // Open the right Slidebar.\\n\\t\\t});\\n\\n\\t\\t// Close a Slidebar\\n\\t\\t$('.sb-close').on('touchend click', function(event) {\\n\\t\\t\\teventHandler(event, $(this)); // Handle the event.\\n\\t\\t\\tvar link;\\n\\n\\t\\t\\t// Close Slidebar via link\\n\\t\\t\\tif ( $(this).parents('.sb-slidebar') ) {\\n\\t\\t\\t\\tif ( $(this).is('a') ) {\\n\\t\\t\\t\\t\\tlink = $(this).attr('href');\\n\\t\\t\\t\\t} else if ( $(this).children('a') ) {\\n\\t\\t\\t\\t\\tlink = $(this).children('a').attr('href');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tclose(link); // Close Slidebar and pass link.\\n\\t\\t});\\n\\n\\t\\t// Close Slidebar via site\\n\\t\\t$site.on('touchend click', function(event) {\\n\\t\\t\\tif (settings.siteClose && (leftActive || rightActive)) { // If settings permit closing by site and left or right Slidebar is open.\\n\\t\\t\\t\\teventHandler(event, $(this)); // Handle the event.\\n\\t\\t\\t\\tclose(); // Close it.\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t}; // End Slidebars function.\\n\\n}) (jQuery);\"},\"aw/W\":function(t,e,n){n(\"P+fo\")(n(\"G4FD\"))}});","extractedComments":[]}